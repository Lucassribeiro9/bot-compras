# Arquivo para execução do terraform
name: Terraform

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: "Terraform Init"
        run: terraform init
        # github secrets com as credenciais do OCI
      - name: "Set OCI Credentials and Terraform Plan"
        env:
          TF_VAR_user_ocid: ${{ secrets.USER_OCID }}
          TF_VAR_tenancy_ocid: ${{ secrets.TENANCY_OCID }}
          TF_VAR_api_fingerprint: ${{ secrets.OCI_FINGERPRINT }}
          TF_VAR_region: ${{ secrets.OCI_REGION }}
          TF_VAR_compartment_id: ${{ secrets.TENANCY_OCID}}
          TF_VAR_api_private_key_content: ${{ secrets.OCI_PRIVATE_KEY }}
        run: terraform plan
  apply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    needs: [plan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      # github secrets com as credenciais do OCI
      - name: "Terraform Init"
        run: terraform init
      - name: "Terraform Apply"
        env:
          TF_VAR_user_ocid: ${{ secrets.USER_OCID }}
          TF_VAR_tenancy_ocid: ${{ secrets.TENANCY_OCID }}
          TF_VAR_api_fingerprint: ${{ secrets.OCI_FINGERPRINT }}
          TF_VAR_region: ${{ secrets.OCI_REGION }}
          TF_VAR_compartment_id: ${{ secrets.TENANCY_OCID}}
          TF_VAR_api_private_key_content: ${{ secrets.OCI_PRIVATE_KEY }}
        run: terraform apply -auto-approve
